#!/usr/bin/python

from kubernetes import client,config
import os
import json
import time
import subprocess
import tensorflow as tf

namespace = os.environ["NAMESPACE"]
localIp = os.environ["POD_IP"]

tf.app.flags.DEFINE_string("job_name", "default", "Name of the job")
tf.app.flags.DEFINE_integer("ps_num", 1, "Number of the ps")
tf.app.flags.DEFINE_string("cmd", "python mnist0.py --log_dir=./mnistlog --data_dir=./mnistdata --model_dir=./mnistmodel ", "Cmd to start the job")

FLAGS = tf.app.flags.FLAGS

config.load_incluster_config()
v1 = client.CoreV1Api()
v1batch=client.BatchV1Api()

def getPSWorkerStr():
  psStr = ""
  workerStr = ""
  taskIndex = -1

  pods = v1.list_namespaced_pod(namespace, label_selector="job=" + FLAGS.job_name)
  job = v1batch.list_namespaced_job(namespace, label_selector="job=" + FLAGS.job_name)
  
  items = pods.items
  if (len(items) < job.items[0].spec.parallelism):
    return False, "", "", taskIndex, ""
  for i in range(0, len(items)):
    try:
      podIp = items[i].status.pod_ip
      if (podIp == localIp):
        taskIndex = i
        role = "ps"
        if (taskIndex >= FLAGS.ps_num):
          taskIndex -= FLAGS.ps_num
          role = "worker"
      if (i < FLAGS.ps_num):
        psStr = psStr + podIp + ":2222,"
      else:
        workerStr = workerStr + podIp + ":2222,"
    except Exception as err:
      return False, "", "", taskIndex, ""
  return True, psStr[:-1], workerStr[:-1], taskIndex, role

def execCommand(psStr, workerStr, taskIndex, role):
  cmd = "%s --ps_hosts=%s --worker_hosts=%s --task_index=%d --job_name=%s"%(FLAGS.cmd, psStr, workerStr, taskIndex, role)
  print("the cmd to start the job: " + cmd)
  subp = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
  while subp.poll()==None:
    print subp.stdout.readline()
  print subp.returncode

if __name__=="__main__":

  isParamReady = False
  taskIndex = 0
  psStr = ""
  workerStr = ""
  role = ""
  
  for i in range(0, 100):

    time.sleep(3)

    isParamReady, psStr, workerStr, taskIndex, role = getPSWorkerStr()
    if (isParamReady == False):
      print("PS or Worker Pod is not ready, try it later.")
      continue

    break

  if (isParamReady == True):
    execCommand(psStr, workerStr, taskIndex, role)
  else:
    print("failed to prepare pod to run tf job.")
